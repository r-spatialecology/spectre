// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calculate_solution_commonness_rcpp
IntegerMatrix calculate_solution_commonness_rcpp(IntegerMatrix solution_matrix);
RcppExport SEXP _spectre_calculate_solution_commonness_rcpp(SEXP solution_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type solution_matrix(solution_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_solution_commonness_rcpp(solution_matrix));
    return rcpp_result_gen;
END_RCPP
}
// calculate_solution_commonness_site_rcpp
IntegerMatrix calculate_solution_commonness_site_rcpp(IntegerMatrix solution_matrix, IntegerMatrix solution_commonness, int site);
RcppExport SEXP _spectre_calculate_solution_commonness_site_rcpp(SEXP solution_matrixSEXP, SEXP solution_commonnessSEXP, SEXP siteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type solution_matrix(solution_matrixSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type solution_commonness(solution_commonnessSEXP);
    Rcpp::traits::input_parameter< int >::type site(siteSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_solution_commonness_site_rcpp(solution_matrix, solution_commonness, site));
    return rcpp_result_gen;
END_RCPP
}
// mh_optimizer
List mh_optimizer(IntegerVector alpha_list, const int total_gamma, IntegerMatrix target, const double acceptance_rate_threshold, const unsigned max_iterations, const unsigned burn_in, unsigned long seed);
RcppExport SEXP _spectre_mh_optimizer(SEXP alpha_listSEXP, SEXP total_gammaSEXP, SEXP targetSEXP, SEXP acceptance_rate_thresholdSEXP, SEXP max_iterationsSEXP, SEXP burn_inSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type alpha_list(alpha_listSEXP);
    Rcpp::traits::input_parameter< const int >::type total_gamma(total_gammaSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const double >::type acceptance_rate_threshold(acceptance_rate_thresholdSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(mh_optimizer(alpha_list, total_gamma, target, acceptance_rate_threshold, max_iterations, burn_in, seed));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sample
Rcpp::IntegerVector rcpp_sample(Rcpp::IntegerVector x, int size, bool replace);
RcppExport SEXP _spectre_rcpp_sample(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sample(x, size, replace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spectre_calculate_solution_commonness_rcpp", (DL_FUNC) &_spectre_calculate_solution_commonness_rcpp, 1},
    {"_spectre_calculate_solution_commonness_site_rcpp", (DL_FUNC) &_spectre_calculate_solution_commonness_site_rcpp, 3},
    {"_spectre_mh_optimizer", (DL_FUNC) &_spectre_mh_optimizer, 7},
    {"_spectre_rcpp_sample", (DL_FUNC) &_spectre_rcpp_sample, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_spectre(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
